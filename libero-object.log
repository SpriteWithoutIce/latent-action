/home/linyihan/miniconda3/envs/vla-adapter/lib/python3.10/site-packages/pydantic/_internal/_generate_schema.py:2249: UnsupportedFieldAttributeWarning: The 'repr' attribute with value False was provided to the `Field()` function, which has no effect in the context it was used. 'repr' is field-specific metadata, and can only be attached to a model field using `Annotated` metadata or by assignment. This may have happened because an `Annotated` type alias using the `type` statement was used, or if the `Field()` function was attached to a single member of a union type.
  warnings.warn(
/home/linyihan/miniconda3/envs/vla-adapter/lib/python3.10/site-packages/pydantic/_internal/_generate_schema.py:2249: UnsupportedFieldAttributeWarning: The 'frozen' attribute with value True was provided to the `Field()` function, which has no effect in the context it was used. 'frozen' is field-specific metadata, and can only be attached to a model field using `Annotated` metadata or by assignment. This may have happened because an `Annotated` type alias using the `type` statement was used, or if the `Field()` function was attached to a single member of a union type.
  warnings.warn(
/home/linyihan/linyh/latent-action/latent_action_model/genie/modules/dinov2/layers/swiglu_ffn.py:51: UserWarning: xFormers is not available (SwiGLU)
  warnings.warn("xFormers is not available (SwiGLU)")
/home/linyihan/linyh/latent-action/latent_action_model/genie/modules/dinov2/layers/attention.py:33: UserWarning: xFormers is not available (Attention)
  warnings.warn("xFormers is not available (Attention)")
/home/linyihan/linyh/latent-action/latent_action_model/genie/modules/dinov2/layers/block.py:40: UserWarning: xFormers is not available (Block)
  warnings.warn("xFormers is not available (Block)")
10/31 [22:34:30] INFO     | >> using MLP layer as FFN                               vision_transformer.py:128
[DEBUG] Loading dataset: libero_object
10/31 [22:34:36] INFO     | >> [*] Loading existing dataset statistics from                 data_utils.py:208
                          /home/linyihan/linyh/datasets/modified_libero_rlds/libero_object_                  
                          no_noops/1.0.0/dataset_statistics_9f561ece2d8affc32aeda215bf0de09                  
                          57b214d2b15d49b8744cfa5e015a93ebd.json.                                            
[DEBUG] Dataset size: 66984 transitions

######################################################################################
# Loading the following 1 datasets (incl. sampling weight):                         #
# libero_object: ===========================================================1.000000 #
######################################################################################

Dataset length =  66984
  0%|          | 0/8373 [00:00<?, ?it/s]WARNING: All log messages before absl::InitializeLog() is called are written to STDERR
W0000 00:00:1761921279.757775  839448 op_level_cost_estimator.cc:699] Error in PredictCost() for the op: op: "CropAndResize" attr { key: "T" value { type: DT_FLOAT } } attr { key: "extrapolation_value" value { f: 0 } } attr { key: "method" value { s: "bilinear" } } inputs { dtype: DT_FLOAT shape { dim { size: 1 } dim { size: 224 } dim { size: 224 } dim { size: -14 } } } inputs { dtype: DT_FLOAT shape { dim { size: -2 } dim { size: 4 } } } inputs { dtype: DT_INT32 shape { dim { size: -2 } } } inputs { dtype: DT_INT32 shape { dim { size: 2 } } } device { type: "CPU" vendor: "GenuineIntel" model: "106" frequency: 2300 num_cores: 80 environment { key: "cpu_instruction_set" value: "AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2" } environment { key: "eigen" value: "3.4.90" } l1_cache_size: 49152 l2_cache_size: 1310720 l3_cache_size: 31457280 memory_size: 268435456 } outputs { dtype: DT_FLOAT shape { dim { size: -2 } dim { size: -20 } dim { size: -21 } dim { size: -14 } } }
W0000 00:00:1761921279.758890  839448 op_level_cost_estimator.cc:699] Error in PredictCost() for the op: op: "CropAndResize" attr { key: "T" value { type: DT_FLOAT } } attr { key: "extrapolation_value" value { f: 0 } } attr { key: "method" value { s: "bilinear" } } inputs { dtype: DT_FLOAT shape { dim { size: 1 } dim { size: 224 } dim { size: 224 } dim { size: -15 } } } inputs { dtype: DT_FLOAT shape { dim { size: -3 } dim { size: 4 } } } inputs { dtype: DT_INT32 shape { dim { size: -3 } } } inputs { dtype: DT_INT32 shape { dim { size: 2 } } } device { type: "CPU" vendor: "GenuineIntel" model: "106" frequency: 2300 num_cores: 80 environment { key: "cpu_instruction_set" value: "AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2" } environment { key: "eigen" value: "3.4.90" } l1_cache_size: 49152 l2_cache_size: 1310720 l3_cache_size: 31457280 memory_size: 268435456 } outputs { dtype: DT_FLOAT shape { dim { size: -3 } dim { size: -22 } dim { size: -23 } dim { size: -15 } } }
W0000 00:00:1761921279.759025  839448 op_level_cost_estimator.cc:699] Error in PredictCost() for the op: op: "CropAndResize" attr { key: "T" value { type: DT_FLOAT } } attr { key: "extrapolation_value" value { f: 0 } } attr { key: "method" value { s: "bilinear" } } inputs { dtype: DT_FLOAT shape { dim { size: 1 } dim { size: 224 } dim { size: 224 } dim { size: -16 } } } inputs { dtype: DT_FLOAT shape { dim { size: -4 } dim { size: 4 } } } inputs { dtype: DT_INT32 shape { dim { size: -4 } } } inputs { dtype: DT_INT32 shape { dim { size: 2 } } } device { type: "CPU" vendor: "GenuineIntel" model: "106" frequency: 2300 num_cores: 80 environment { key: "cpu_instruction_set" value: "AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2" } environment { key: "eigen" value: "3.4.90" } l1_cache_size: 49152 l2_cache_size: 1310720 l3_cache_size: 31457280 memory_size: 268435456 } outputs { dtype: DT_FLOAT shape { dim { size: -4 } dim { size: -24 } dim { size: -25 } dim { size: -16 } } }
W0000 00:00:1761921279.759125  839448 op_level_cost_estimator.cc:699] Error in PredictCost() for the op: op: "CropAndResize" attr { key: "T" value { type: DT_FLOAT } } attr { key: "extrapolation_value" value { f: 0 } } attr { key: "method" value { s: "bilinear" } } inputs { dtype: DT_FLOAT shape { dim { size: 1 } dim { size: 224 } dim { size: 224 } dim { size: -17 } } } inputs { dtype: DT_FLOAT shape { dim { size: -5 } dim { size: 4 } } } inputs { dtype: DT_INT32 shape { dim { size: -5 } } } inputs { dtype: DT_INT32 shape { dim { size: 2 } } } device { type: "CPU" vendor: "GenuineIntel" model: "106" frequency: 2300 num_cores: 80 environment { key: "cpu_instruction_set" value: "AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2" } environment { key: "eigen" value: "3.4.90" } l1_cache_size: 49152 l2_cache_size: 1310720 l3_cache_size: 31457280 memory_size: 268435456 } outputs { dtype: DT_FLOAT shape { dim { size: -5 } dim { size: -26 } dim { size: -27 } dim { size: -17 } } }
W0000 00:00:1761921279.759221  839448 op_level_cost_estimator.cc:699] Error in PredictCost() for the op: op: "CropAndResize" attr { key: "T" value { type: DT_FLOAT } } attr { key: "extrapolation_value" value { f: 0 } } attr { key: "method" value { s: "bilinear" } } inputs { dtype: DT_FLOAT shape { dim { size: 1 } dim { size: 224 } dim { size: 224 } dim { size: -18 } } } inputs { dtype: DT_FLOAT shape { dim { size: -10 } dim { size: 4 } } } inputs { dtype: DT_INT32 shape { dim { size: -10 } } } inputs { dtype: DT_INT32 shape { dim { size: 2 } } } device { type: "CPU" vendor: "GenuineIntel" model: "106" frequency: 2300 num_cores: 80 environment { key: "cpu_instruction_set" value: "AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2" } environment { key: "eigen" value: "3.4.90" } l1_cache_size: 49152 l2_cache_size: 1310720 l3_cache_size: 31457280 memory_size: 268435456 } outputs { dtype: DT_FLOAT shape { dim { size: -10 } dim { size: -40 } dim { size: -41 } dim { size: -18 } } }
W0000 00:00:1761921279.759441  839448 op_level_cost_estimator.cc:699] Error in PredictCost() for the op: op: "CropAndResize" attr { key: "T" value { type: DT_FLOAT } } attr { key: "extrapolation_value" value { f: 0 } } attr { key: "method" value { s: "bilinear" } } inputs { dtype: DT_FLOAT shape { dim { size: 1 } dim { size: 224 } dim { size: 224 } dim { size: -19 } } } inputs { dtype: DT_FLOAT shape { dim { size: -11 } dim { size: 4 } } } inputs { dtype: DT_INT32 shape { dim { size: -11 } } } inputs { dtype: DT_INT32 shape { dim { size: 2 } } } device { type: "CPU" vendor: "GenuineIntel" model: "106" frequency: 2300 num_cores: 80 environment { key: "cpu_instruction_set" value: "AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2" } environment { key: "eigen" value: "3.4.90" } l1_cache_size: 49152 l2_cache_size: 1310720 l3_cache_size: 31457280 memory_size: 268435456 } outputs { dtype: DT_FLOAT shape { dim { size: -11 } dim { size: -42 } dim { size: -43 } dim { size: -19 } } }
[tensor([ 5,  3, 11, 10], device='cuda:0'), tensor([0, 4, 3, 3], device='cuda:0'), tensor([13, 10, 11,  0], device='cuda:0'), tensor([ 0,  8,  5, 15], device='cuda:0'), tensor([ 8,  5, 13,  8], device='cuda:0'), tensor([11, 10,  3,  3], device='cuda:0'), tensor([ 3,  3, 11,  4], device='cuda:0'), tensor([ 3,  3, 10, 11], device='cuda:0')]
[tensor([ 3, 15,  8,  3], device='cuda:0'), tensor([ 3,  3,  8, 10], device='cuda:0'), tensor([ 3, 10,  3,  3], device='cuda:0'), tensor([ 9, 15,  3,  3], device='cuda:0'), tensor([11,  2,  3,  3], device='cuda:0'), tensor([3, 3, 1, 4], device='cuda:0'), tensor([ 0,  3, 10, 15], device='cuda:0'), tensor([0, 9, 3, 3], device='cuda:0')]
[tensor([ 0,  5,  5, 10], device='cuda:0'), tensor([3, 3, 7, 9], device='cuda:0'), tensor([ 3, 15,  6,  3], device='cuda:0'), tensor([ 3,  0, 10,  3], device='cuda:0'), tensor([ 0, 12,  3,  3], device='cuda:0'), tensor([3, 3, 7, 0], device='cuda:0'), tensor([ 3,  3, 11,  0], device='cuda:0'), tensor([ 3,  3, 12,  0], device='cuda:0')]
[tensor([ 3, 15,  3,  3], device='cuda:0'), tensor([ 3, 15,  6,  3], device='cuda:0'), tensor([0, 3, 0, 2], device='cuda:0'), tensor([ 3,  3, 10,  4], device='cuda:0'), tensor([13, 13,  5,  8], device='cuda:0'), tensor([ 3, 13, 10,  3], device='cuda:0'), tensor([ 3, 15,  6,  3], device='cuda:0'), tensor([11, 10, 13,  3], device='cuda:0')]
[tensor([ 3, 15,  1,  3], device='cuda:0'), tensor([ 3, 10,  3,  3], device='cuda:0'), tensor([ 3,  6, 15, 11], device='cuda:0'), tensor([ 3, 15,  4,  3], device='cuda:0'), tensor([ 3,  6, 10,  3], device='cuda:0'), tensor([ 3,  3, 13, 10], device='cuda:0'), tensor([0, 8, 3, 3], device='cuda:0'), tensor([ 3, 15,  6,  3], device='cuda:0')]
[tensor([3, 0, 8, 3], device='cuda:0'), tensor([ 3,  3, 15,  9], device='cuda:0'), tensor([ 6,  3,  0, 15], device='cuda:0'), tensor([ 3,  3,  7, 15], device='cuda:0'), tensor([13, 13, 13, 13], device='cuda:0'), tensor([ 8, 13, 10,  3], device='cuda:0'), tensor([ 3, 10,  3,  3], device='cuda:0'), tensor([ 3,  3, 12,  1], device='cuda:0')]
[tensor([ 8, 13, 10,  8], device='cuda:0'), tensor([ 0, 13, 11,  0], device='cuda:0'), tensor([ 3,  3, 10,  5], device='cuda:0'), tensor([ 5, 13, 13, 13], device='cuda:0'), tensor([ 3,  6, 15, 11], device='cuda:0'), tensor([13, 13, 13, 13], device='cuda:0'), tensor([ 3, 15,  5,  3], device='cuda:0'), tensor([ 6, 10,  3,  3], device='cuda:0')]
[tensor([ 0,  5, 11, 14], device='cuda:0'), tensor([ 3, 15,  8,  3], device='cuda:0'), tensor([ 3, 10,  3,  3], device='cuda:0'), tensor([ 3,  3,  7, 15], device='cuda:0'), tensor([ 3, 15, 11,  3], device='cuda:0'), tensor([ 3, 14,  1,  3], device='cuda:0'), tensor([13, 13,  5,  5], device='cuda:0'), tensor([3, 3, 0, 0], device='cuda:0')]
[tensor([ 3,  3, 13, 10], device='cuda:0'), tensor([ 6,  3, 10, 13], device='cuda:0'), tensor([ 3, 10,  6,  3], device='cuda:0'), tensor([ 3,  6, 10,  3], device='cuda:0'), tensor([ 3,  3, 10, 10], device='cuda:0'), tensor([ 3, 15, 11,  3], device='cuda:0'), tensor([ 5,  8, 15, 10], device='cuda:0'), tensor([ 3,  3, 15,  9], device='cuda:0')]
[tensor([ 3,  3, 11, 10], device='cuda:0'), tensor([ 0, 10, 13,  8], device='cuda:0'), tensor([13, 13,  5,  5], device='cuda:0'), tensor([ 3, 10, 11,  3], device='cuda:0'), tensor([ 3,  3, 11,  0], device='cuda:0'), tensor([ 3, 14,  9,  3], device='cuda:0'), tensor([3, 3, 9, 0], device='cuda:0'), tensor([ 5, 15,  6,  6], device='cuda:0')]
[tensor([ 3,  0, 11,  3], device='cuda:0'), tensor([ 3, 10,  3,  3], device='cuda:0'), tensor([ 3, 15, 11,  3], device='cuda:0'), tensor([9, 3, 4, 2], device='cuda:0'), tensor([3, 3, 4, 0], device='cuda:0'), tensor([ 0, 13, 13,  8], device='cuda:0'), tensor([ 3, 10,  6,  3], device='cuda:0'), tensor([ 3, 10, 13,  3], device='cuda:0')]
[tensor([13, 10,  3, 14], device='cuda:0'), tensor([ 3,  3, 10,  0], device='cuda:0'), tensor([ 3, 15, 11,  3], device='cuda:0'), tensor([ 3, 14,  4,  3], device='cuda:0'), tensor([13, 13, 13,  5], device='cuda:0'), tensor([ 3, 15,  3,  3], device='cuda:0'), tensor([13, 13, 13, 13], device='cuda:0'), tensor([ 5, 13, 13,  8], device='cuda:0')]
[tensor([ 3,  3, 11,  4], device='cuda:0'), tensor([13, 15,  3,  3], device='cuda:0'), tensor([ 3, 15,  3,  3], device='cuda:0'), tensor([3, 3, 7, 9], device='cuda:0'), tensor([ 6, 10,  3,  3], device='cuda:0'), tensor([3, 0, 0, 3], device='cuda:0'), tensor([ 3, 15, 11,  3], device='cuda:0'), tensor([11, 10,  3,  3], device='cuda:0')]
[tensor([ 5, 11,  5,  0], device='cuda:0'), tensor([ 3,  2, 11,  3], device='cuda:0'), tensor([ 3, 15,  3,  3], device='cuda:0'), tensor([ 3, 10,  5,  3], device='cuda:0'), tensor([ 3, 15, 11,  3], device='cuda:0'), tensor([ 3,  2, 11,  3], device='cuda:0'), tensor([8, 2, 3, 3], device='cuda:0'), tensor([3, 3, 1, 4], device='cuda:0')]
[tensor([11,  2, 11,  3], device='cuda:0'), tensor([3, 0, 0, 3], device='cuda:0'), tensor([ 3,  3, 10,  0], device='cuda:0'), tensor([ 8, 10, 15,  3], device='cuda:0'), tensor([ 3,  3, 10,  3], device='cuda:0'), tensor([11, 13, 15,  8], device='cuda:0'), tensor([ 7,  3, 11, 15], device='cuda:0'), tensor([ 8, 13, 10,  8], device='cuda:0')]
[tensor([12,  3,  5, 15], device='cuda:0'), tensor([13,  6,  0, 15], device='cuda:0'), tensor([ 3,  6, 10,  3], device='cuda:0'), tensor([ 3, 15,  3,  3], device='cuda:0'), tensor([ 3, 15, 13,  3], device='cuda:0'), tensor([ 3,  3, 15,  3], device='cuda:0'), tensor([3, 2, 3, 3], device='cuda:0'), tensor([10,  4,  3,  3], device='cuda:0')]
[tensor([ 3,  3,  5, 15], device='cuda:0'), tensor([ 3,  3,  5, 15], device='cuda:0'), tensor([ 5,  3, 10, 10], device='cuda:0'), tensor([ 8, 15,  3,  3], device='cuda:0'), tensor([8, 2, 8, 3], device='cuda:0'), tensor([ 8, 13, 13, 11], device='cuda:0'), tensor([ 3, 15,  6,  3], device='cuda:0'), tensor([ 3, 14,  0,  3], device='cuda:0')]
[tensor([ 5, 11, 10, 15], device='cuda:0'), tensor([ 3, 10,  3,  3], device='cuda:0'), tensor([3, 3, 1, 0], device='cuda:0'), tensor([13, 13,  5, 13], device='cuda:0'), tensor([ 5, 15, 13,  6], device='cuda:0'), tensor([ 3,  3, 15,  8], device='cuda:0'), tensor([11, 10,  3,  3], device='cuda:0'), tensor([11,  5, 15, 11], device='cuda:0')]
[tensor([ 3, 10,  5,  3], device='cuda:0'), tensor([ 3, 10,  8,  3], device='cuda:0'), tensor([14,  5,  3,  6], device='cuda:0'), tensor([13, 13, 13, 13], device='cuda:0'), tensor([3, 0, 9, 3], device='cuda:0'), tensor([ 3,  3, 10,  4], device='cuda:0'), tensor([ 3,  3, 12,  4], device='cuda:0'), tensor([11,  3, 10, 10], device='cuda:0')]
[tensor([11, 10, 15, 11], device='cuda:0'), tensor([ 3, 14,  1,  3], device='cuda:0'), tensor([ 6, 10,  3,  3], device='cuda:0'), tensor([ 5,  3,  0, 10], device='cuda:0'), tensor([ 3,  3, 15,  0], device='cuda:0'), tensor([11,  3,  3,  2], device='cuda:0'), tensor([10, 11,  8, 15], device='cuda:0'), tensor([ 3, 11, 15,  3], device='cuda:0')]
[tensor([ 3,  3, 12,  4], device='cuda:0'), tensor([ 3,  3, 11,  0], device='cuda:0'), tensor([ 3, 10,  3,  3], device='cuda:0'), tensor([ 5, 10,  8,  3], device='cuda:0'), tensor([ 3, 10,  3,  3], device='cuda:0'), tensor([ 5, 13, 13,  5], device='cuda:0'), tensor([ 3, 10,  3,  3], device='cuda:0'), tensor([ 3, 15, 11,  3], device='cuda:0')]
[tensor([ 1, 15,  3,  3], device='cuda:0'), tensor([ 0,  8, 11,  7], device='cuda:0'), tensor([ 8, 13,  0, 11], device='cuda:0'), tensor([ 3, 15,  8,  3], device='cuda:0'), tensor([ 3, 15,  4,  3], device='cuda:0'), tensor([3, 3, 4, 4], device='cuda:0'), tensor([ 0,  8, 13, 15], device='cuda:0'), tensor([3, 3, 7, 0], device='cuda:0')]
[tensor([ 3, 14, 11,  3], device='cuda:0'), tensor([3, 0, 4, 3], device='cuda:0'), tensor([ 3, 14, 11,  3], device='cuda:0'), tensor([ 3,  6, 15,  3], device='cuda:0'), tensor([3, 3, 0, 0], device='cuda:0'), tensor([ 6, 10, 13,  3], device='cuda:0'), tensor([ 3, 15, 11,  3], device='cuda:0'), tensor([ 3, 10,  3,  3], device='cuda:0')]
[tensor([11, 15, 13,  3], device='cuda:0'), tensor([ 1, 15, 11,  3], device='cuda:0'), tensor([8, 2, 3, 3], device='cuda:0'), tensor([ 3,  3, 10,  8], device='cuda:0'), tensor([ 4, 10,  3, 12], device='cuda:0'), tensor([11,  0,  3,  3], device='cuda:0'), tensor([ 3, 14,  4,  3], device='cuda:0'), tensor([11,  3,  5, 10], device='cuda:0')]
[tensor([ 3, 10,  9,  3], device='cuda:0'), tensor([3, 3, 4, 0], device='cuda:0'), tensor([13, 13, 13,  5], device='cuda:0'), tensor([13, 13,  5,  8], device='cuda:0'), tensor([ 3, 15,  3,  3], device='cuda:0'), tensor([ 3, 10,  9,  3], device='cuda:0'), tensor([ 5, 10,  3,  1], device='cuda:0'), tensor([ 6,  3, 10, 10], device='cuda:0')]
[tensor([ 3, 15,  3,  3], device='cuda:0'), tensor([ 0,  3, 13, 15], device='cuda:0'), tensor([11,  3, 10, 10], device='cuda:0'), tensor([ 3, 15,  3,  3], device='cuda:0'), tensor([ 6, 10,  3,  3], device='cuda:0'), tensor([ 3, 10,  3,  3], device='cuda:0'), tensor([11, 15,  6,  3], device='cuda:0'), tensor([ 3,  3, 10, 13], device='cuda:0')]
[tensor([ 6,  3,  1, 15], device='cuda:0'), tensor([14,  0,  5, 10], device='cuda:0'), tensor([ 3,  6, 10,  3], device='cuda:0'), tensor([ 3,  3, 10, 11], device='cuda:0'), tensor([0, 0, 3, 3], device='cuda:0'), tensor([5, 4, 3, 6], device='cuda:0'), tensor([ 3,  3, 10,  9], device='cuda:0'), tensor([13, 13,  5,  5], device='cuda:0')]
[tensor([ 5, 10,  4,  6], device='cuda:0'), tensor([ 3,  3, 10,  4], device='cuda:0'), tensor([ 0,  0,  3, 12], device='cuda:0'), tensor([ 6,  3, 12,  2], device='cuda:0'), tensor([ 3, 15,  3,  3], device='cuda:0'), tensor([ 3, 10, 10,  3], device='cuda:0'), tensor([5, 5, 0, 9], device='cuda:0'), tensor([ 8, 10,  5,  3], device='cuda:0')]
[tensor([ 3,  3,  8, 15], device='cuda:0'), tensor([ 8, 15,  3,  3], device='cuda:0'), tensor([13, 13, 13, 13], device='cuda:0'), tensor([ 3,  3, 10,  3], device='cuda:0'), tensor([ 3, 14,  4,  3], device='cuda:0'), tensor([ 3,  3, 14,  4], device='cuda:0'), tensor([3, 3, 7, 0], device='cuda:0'), tensor([ 8, 13, 10,  3], device='cuda:0')]
[tensor([ 3, 15,  3,  3], device='cuda:0'), tensor([ 3, 13,  0,  3], device='cuda:0'), tensor([ 3, 10, 10,  3], device='cuda:0'), tensor([11, 10,  3,  3], device='cuda:0'), tensor([ 3,  3, 10,  5], device='cuda:0'), tensor([3, 3, 3, 0], device='cuda:0'), tensor([ 3, 14,  0,  3], device='cuda:0'), tensor([ 6,  3, 14, 15], device='cuda:0')]
[tensor([ 0, 13, 13,  8], device='cuda:0'), tensor([13, 13, 13,  5], device='cuda:0'), tensor([3, 0, 1, 3], device='cuda:0'), tensor([3, 3, 7, 4], device='cuda:0'), tensor([ 3, 15,  6,  3], device='cuda:0'), tensor([ 3, 10,  6,  3], device='cuda:0'), tensor([ 9, 10,  3,  3], device='cuda:0'), tensor([ 1,  3, 11, 15], device='cuda:0')]
[tensor([13, 13, 13,  8], device='cuda:0'), tensor([ 3, 13, 15,  3], device='cuda:0'), tensor([ 0, 15,  3,  1], device='cuda:0'), tensor([ 3, 15,  6,  3], device='cuda:0'), tensor([ 3,  5, 10,  6], device='cuda:0'), tensor([ 3, 10,  6,  3], device='cuda:0'), tensor([ 3,  3, 15, 11], device='cuda:0'), tensor([ 3, 10, 10,  3], device='cuda:0')]
[tensor([3, 3, 4, 9], device='cuda:0'), tensor([ 3,  3, 10, 10], device='cuda:0'), tensor([ 3, 10,  9,  3], device='cuda:0'), tensor([ 3, 14, 11,  3], device='cuda:0'), tensor([ 3, 15,  1,  3], device='cuda:0'), tensor([3, 0, 7, 3], device='cuda:0'), tensor([4, 4, 3, 1], device='cuda:0'), tensor([ 5, 13, 10,  8], device='cuda:0')]
[tensor([ 3,  6, 15,  6], device='cuda:0'), tensor([ 8, 14,  3,  3], device='cuda:0'), tensor([13, 13,  8, 13], device='cuda:0'), tensor([ 3,  3, 15,  1], device='cuda:0'), tensor([13, 13,  5, 10], device='cuda:0'), tensor([13, 13, 13,  5], device='cuda:0'), tensor([ 3,  3, 15, 11], device='cuda:0'), tensor([ 8,  0, 10, 11], device='cuda:0')]
[tensor([ 3,  3, 10,  3], device='cuda:0'), tensor([ 3,  6, 10,  3], device='cuda:0'), tensor([11,  3, 10, 10], device='cuda:0'), tensor([13, 13,  3,  0], device='cuda:0'), tensor([ 3, 14, 11,  3], device='cuda:0'), tensor([13, 10,  3, 14], device='cuda:0'), tensor([3, 0, 3, 3], device='cuda:0'), tensor([ 8, 10, 15,  8], device='cuda:0')]
[tensor([ 3, 10,  0,  3], device='cuda:0'), tensor([ 3, 14,  4,  3], device='cuda:0'), tensor([ 3,  3, 10,  6], device='cuda:0'), tensor([ 3,  3, 15, 11], device='cuda:0'), tensor([ 3, 15,  6,  3], device='cuda:0'), tensor([ 3,  3, 12,  0], device='cuda:0'), tensor([ 3, 14, 11,  3], device='cuda:0'), tensor([ 3, 15,  0,  3], device='cuda:0')]
[tensor([ 8,  0, 13,  3], device='cuda:0'), tensor([11, 10, 10,  3], device='cuda:0'), tensor([ 6, 10,  3,  3], device='cuda:0'), tensor([3, 3, 9, 0], device='cuda:0'), tensor([ 3, 10,  3,  3], device='cuda:0'), tensor([ 3,  6, 10,  5], device='cuda:0'), tensor([ 3, 15,  8,  3], device='cuda:0'), tensor([ 3,  3, 10,  9], device='cuda:0')]
[tensor([ 3,  6, 10,  3], device='cuda:0'), tensor([ 3,  6, 10,  3], device='cuda:0'), tensor([ 0,  6,  3, 15], device='cuda:0'), tensor([ 3, 15,  3,  3], device='cuda:0'), tensor([3, 0, 5, 3], device='cuda:0'), tensor([ 8, 15,  3,  3], device='cuda:0'), tensor([5, 2, 3, 1], device='cuda:0'), tensor([0, 2, 3, 3], device='cuda:0')]
[tensor([ 3,  3, 15,  9], device='cuda:0'), tensor([ 3, 15,  4,  3], device='cuda:0'), tensor([10, 11,  3,  3], device='cuda:0'), tensor([11, 13, 13,  3], device='cuda:0'), tensor([ 3,  3, 15,  6], device='cuda:0'), tensor([ 0, 13,  3,  3], device='cuda:0'), tensor([ 4,  0,  3, 11], device='cuda:0'), tensor([ 3,  3, 10,  0], device='cuda:0')]
[tensor([ 3, 14,  6,  3], device='cuda:0'), tensor([ 3, 10,  3,  3], device='cuda:0'), tensor([ 3, 14, 11,  3], device='cuda:0'), tensor([ 3, 10, 10,  3], device='cuda:0'), tensor([ 3, 10, 11,  3], device='cuda:0'), tensor([11, 10, 11,  3], device='cuda:0'), tensor([10, 15,  6,  3], device='cuda:0'), tensor([ 8, 10, 10, 11], device='cuda:0')]
[tensor([15,  5,  3, 15], device='cuda:0'), tensor([ 3,  3,  6, 12], device='cuda:0'), tensor([ 5, 15,  3,  6], device='cuda:0'), tensor([ 8,  6,  7, 14], device='cuda:0'), tensor([ 6, 13, 10, 11], device='cuda:0'), tensor([ 3, 15,  6,  3], device='cuda:0'), tensor([ 6, 15, 11,  3], device='cuda:0'), tensor([ 3,  6, 10,  3], device='cuda:0')]
[tensor([ 3,  3, 10,  6], device='cuda:0'), tensor([3, 3, 7, 0], device='cuda:0'), tensor([ 3,  3, 12,  4], device='cuda:0'), tensor([ 3, 10,  8,  3], device='cuda:0'), tensor([ 3,  3,  4, 10], device='cuda:0'), tensor([3, 0, 9, 3], device='cuda:0'), tensor([ 8, 13, 10,  3], device='cuda:0'), tensor([ 3,  3,  0, 11], device='cuda:0')]
[tensor([ 3, 15,  3,  3], device='cuda:0'), tensor([ 5,  6, 10, 10], device='cuda:0'), tensor([ 3, 15,  1,  3], device='cuda:0'), tensor([ 3, 15,  6,  3], device='cuda:0'), tensor([13, 13, 13,  5], device='cuda:0'), tensor([ 3, 14, 11,  3], device='cuda:0'), tensor([3, 3, 0, 0], device='cuda:0'), tensor([ 3, 14, 11,  3], device='cuda:0')]
[tensor([ 8,  0, 13,  3], device='cuda:0'), tensor([ 3, 14,  4,  3], device='cuda:0'), tensor([ 3,  3, 10,  3], device='cuda:0'), tensor([ 3,  6, 10,  3], device='cuda:0'), tensor([3, 0, 6, 3], device='cuda:0'), tensor([ 8,  0, 13,  8], device='cuda:0'), tensor([ 3, 15,  3,  3], device='cuda:0'), tensor([ 0, 11,  6, 10], device='cuda:0')]
[tensor([ 3,  3, 11,  0], device='cuda:0'), tensor([6, 0, 0, 3], device='cuda:0'), tensor([3, 3, 1, 4], device='cuda:0'), tensor([ 3, 15,  6,  3], device='cuda:0'), tensor([3, 0, 4, 3], device='cuda:0'), tensor([ 3,  3, 10,  3], device='cuda:0'), tensor([ 5, 10,  5,  3], device='cuda:0'), tensor([ 5, 13,  0, 11], device='cuda:0')]
[tensor([ 1,  3, 14, 15], device='cuda:0'), tensor([ 0, 11,  8, 15], device='cuda:0'), tensor([ 5, 10,  3,  3], device='cuda:0'), tensor([ 3, 15,  3,  3], device='cuda:0'), tensor([ 3, 14,  4,  3], device='cuda:0'), tensor([ 6, 15,  5,  3], device='cuda:0'), tensor([ 3, 15,  5,  3], device='cuda:0'), tensor([ 3, 10,  3,  3], device='cuda:0')]
[tensor([ 5, 10,  6,  8], device='cuda:0'), tensor([11, 15,  3,  3], device='cuda:0'), tensor([ 3,  3, 10, 10], device='cuda:0'), tensor([ 5, 13, 10, 11], device='cuda:0'), tensor([ 8, 10,  5,  3], device='cuda:0'), tensor([ 3, 15,  3,  3], device='cuda:0'), tensor([ 8, 10, 13,  3], device='cuda:0'), tensor([ 3, 15,  8,  3], device='cuda:0')]
[tensor([ 3, 15,  3,  3], device='cuda:0'), tensor([ 3, 15,  5,  3], device='cuda:0'), tensor([3, 0, 0, 3], device='cuda:0'), tensor([3, 3, 0, 0], device='cuda:0'), tensor([ 5, 10,  5,  6], device='cuda:0'), tensor([11,  5, 15,  0], device='cuda:0'), tensor([3, 3, 7, 0], device='cuda:0'), tensor([ 8, 10, 13,  3], device='cuda:0')]
[tensor([ 3,  3, 15,  5], device='cuda:0'), tensor([ 3,  3, 15,  8], device='cuda:0'), tensor([ 5, 13, 10, 11], device='cuda:0'), tensor([11,  8, 10,  0], device='cuda:0'), tensor([3, 0, 3, 3], device='cuda:0'), tensor([ 8, 10,  5, 11], device='cuda:0'), tensor([ 3, 15,  3,  3], device='cuda:0'), tensor([ 8, 13, 10, 11], device='cuda:0')]
[tensor([13, 13, 13, 13], device='cuda:0'), tensor([ 3, 14,  0,  3], device='cuda:0'), tensor([ 5,  1,  3, 12], device='cuda:0'), tensor([ 3, 15,  5,  3], device='cuda:0'), tensor([ 8, 13, 10,  6], device='cuda:0'), tensor([ 3, 14,  4,  3], device='cuda:0'), tensor([11, 10, 13,  3], device='cuda:0'), tensor([ 3,  3, 15,  5], device='cuda:0')]
[tensor([ 3, 14, 11,  3], device='cuda:0'), tensor([ 0, 15,  8,  3], device='cuda:0'), tensor([ 3,  3, 10,  0], device='cuda:0'), tensor([ 3,  3, 10, 10], device='cuda:0'), tensor([13, 13, 13, 13], device='cuda:0'), tensor([ 5, 10,  5,  3], device='cuda:0'), tensor([ 3, 14,  6,  3], device='cuda:0'), tensor([ 3,  3, 11,  0], device='cuda:0')]
[tensor([11, 13, 10,  6], device='cuda:0'), tensor([ 3, 13, 10,  6], device='cuda:0'), tensor([ 3,  6, 15,  5], device='cuda:0'), tensor([13, 13,  5, 13], device='cuda:0'), tensor([13,  3,  3, 11], device='cuda:0'), tensor([3, 3, 1, 0], device='cuda:0'), tensor([ 0,  5,  3, 14], device='cuda:0'), tensor([11, 13, 15, 11], device='cuda:0')]
[tensor([3, 0, 4, 3], device='cuda:0'), tensor([5, 3, 3, 4], device='cuda:0'), tensor([ 6,  5, 15,  0], device='cuda:0'), tensor([ 3,  3, 15,  8], device='cuda:0'), tensor([ 3, 10,  3,  3], device='cuda:0'), tensor([ 3, 15, 11,  3], device='cuda:0'), tensor([ 3, 15,  3,  3], device='cuda:0'), tensor([ 0,  3, 10,  2], device='cuda:0')]
[tensor([11,  8, 10,  8], device='cuda:0'), tensor([13, 13, 11,  0], device='cuda:0'), tensor([ 3,  3, 15,  8], device='cuda:0'), tensor([ 3, 15,  6,  3], device='cuda:0'), tensor([3, 3, 6, 4], device='cuda:0'), tensor([ 3, 14, 11,  3], device='cuda:0'), tensor([ 4, 10,  3,  3], device='cuda:0'), tensor([3, 0, 4, 3], device='cuda:0')]
[tensor([ 3, 15,  5,  3], device='cuda:0'), tensor([ 3, 14, 11,  3], device='cuda:0'), tensor([ 5, 13, 13,  8], device='cuda:0'), tensor([ 3, 15, 11,  3], device='cuda:0'), tensor([ 3, 10,  0,  3], device='cuda:0'), tensor([ 3, 15,  3,  3], device='cuda:0'), tensor([ 3, 15,  3,  3], device='cuda:0'), tensor([ 3, 14, 11,  3], device='cuda:0')]
[tensor([13, 13,  4,  5], device='cuda:0'), tensor([ 3,  3, 10, 11], device='cuda:0'), tensor([3, 2, 6, 3], device='cuda:0'), tensor([ 3, 15, 11,  3], device='cuda:0'), tensor([ 3,  6, 10,  3], device='cuda:0'), tensor([ 3,  3, 10, 11], device='cuda:0'), tensor([ 3,  3, 11, 10], device='cuda:0'), tensor([ 3,  3, 11, 10], device='cuda:0')]
[tensor([ 3, 10,  1,  3], device='cuda:0'), tensor([3, 3, 1, 0], device='cuda:0'), tensor([ 3, 15, 13,  3], device='cuda:0'), tensor([ 3,  3,  1, 15], device='cuda:0'), tensor([ 5, 10, 13,  3], device='cuda:0'), tensor([ 3,  3, 13, 10], device='cuda:0'), tensor([ 3,  3, 10,  5], device='cuda:0'), tensor([ 3, 15,  6,  3], device='cuda:0')]
[tensor([3, 3, 7, 0], device='cuda:0'), tensor([ 3,  3,  7, 10], device='cuda:0'), tensor([11,  2, 11,  3], device='cuda:0'), tensor([9, 0, 3, 3], device='cuda:0'), tensor([ 5, 13, 13, 11], device='cuda:0'), tensor([3, 3, 0, 0], device='cuda:0'), tensor([ 5, 13, 10,  0], device='cuda:0'), tensor([ 3,  3, 12,  4], device='cuda:0')]
[tensor([ 3,  3, 11,  0], device='cuda:0'), tensor([3, 3, 7, 0], device='cuda:0'), tensor([ 6,  3, 12, 15], device='cuda:0'), tensor([ 3,  6, 10,  3], device='cuda:0'), tensor([ 3, 15,  3,  3], device='cuda:0'), tensor([ 6,  3,  1, 15], device='cuda:0'), tensor([ 6, 10,  3,  3], device='cuda:0'), tensor([ 0, 14,  3,  3], device='cuda:0')]
[tensor([ 3, 10,  3,  3], device='cuda:0'), tensor([ 3, 15,  4,  3], device='cuda:0'), tensor([ 3, 10,  3,  3], device='cuda:0'), tensor([ 3, 14,  1,  3], device='cuda:0'), tensor([ 3, 15,  8,  3], device='cuda:0'), tensor([ 3,  3, 10,  4], device='cuda:0'), tensor([ 9,  3,  1, 10], device='cuda:0'), tensor([10,  0,  3,  3], device='cuda:0')]
[tensor([11,  3,  1, 15], device='cuda:0'), tensor([ 3, 15,  8,  3], device='cuda:0'), tensor([ 0, 13,  5,  0], device='cuda:0'), tensor([3, 3, 0, 4], device='cuda:0'), tensor([ 8, 15,  3,  3], device='cuda:0'), tensor([ 5, 15,  5,  3], device='cuda:0'), tensor([ 3,  3, 10,  3], device='cuda:0'), tensor([ 3, 14,  6,  3], device='cuda:0')]
[tensor([ 3, 15,  8,  3], device='cuda:0'), tensor([ 3, 15,  3,  3], device='cuda:0'), tensor([ 5,  3, 11, 12], device='cuda:0'), tensor([11, 11, 15, 10], device='cuda:0'), tensor([3, 3, 0, 1], device='cuda:0'), tensor([ 5,  5,  0, 10], device='cuda:0'), tensor([ 6,  3, 11, 15], device='cuda:0'), tensor([ 1,  3,  4, 15], device='cuda:0')]
[tensor([11, 10,  3,  3], device='cuda:0'), tensor([ 5, 10, 11, 11], device='cuda:0'), tensor([13, 10, 13, 11], device='cuda:0'), tensor([ 5, 15,  3,  3], device='cuda:0'), tensor([13,  3,  5, 10], device='cuda:0'), tensor([0, 2, 3, 3], device='cuda:0'), tensor([12,  3,  4, 15], device='cuda:0'), tensor([ 3,  3, 10, 13], device='cuda:0')]
[tensor([ 3,  8, 15,  8], device='cuda:0'), tensor([ 3,  3,  9, 15], device='cuda:0'), tensor([6, 0, 3, 3], device='cuda:0'), tensor([13, 13, 13, 13], device='cuda:0'), tensor([ 8,  3,  4, 10], device='cuda:0'), tensor([ 5, 13, 10,  0], device='cuda:0'), tensor([3, 0, 3, 3], device='cuda:0'), tensor([ 3, 14,  9,  3], device='cuda:0')]
[tensor([10,  5,  8, 10], device='cuda:0'), tensor([3, 0, 1, 3], device='cuda:0'), tensor([ 8, 10, 13,  8], device='cuda:0'), tensor([ 6, 10,  6,  3], device='cuda:0'), tensor([ 0,  3,  8, 15], device='cuda:0'), tensor([11, 10,  5,  3], device='cuda:0'), tensor([13, 11,  0, 14], device='cuda:0'), tensor([ 3, 14, 11,  3], device='cuda:0')]
[tensor([ 1, 14,  3,  3], device='cuda:0'), tensor([ 3, 14, 11,  3], device='cuda:0'), tensor([3, 0, 3, 3], device='cuda:0'), tensor([ 3, 10, 11,  3], device='cuda:0'), tensor([14,  5,  3,  7], device='cuda:0'), tensor([11,  6, 10, 10], device='cuda:0'), tensor([ 3, 15,  5,  3], device='cuda:0'), tensor([ 3, 10,  5,  3], device='cuda:0')]
[tensor([5, 6, 5, 0], device='cuda:0'), tensor([ 0,  8,  8, 15], device='cuda:0'), tensor([ 3,  3, 10,  3], device='cuda:0'), tensor([0, 4, 3, 7], device='cuda:0'), tensor([ 4, 11,  3, 11], device='cuda:0'), tensor([ 3, 10,  6,  3], device='cuda:0'), tensor([ 5, 14,  3,  3], device='cuda:0'), tensor([3, 0, 7, 3], device='cuda:0')]
[tensor([ 5, 13, 10, 11], device='cuda:0'), tensor([3, 0, 4, 3], device='cuda:0'), tensor([13, 13,  4,  8], device='cuda:0'), tensor([10,  8, 11,  3], device='cuda:0'), tensor([ 3, 13, 10,  3], device='cuda:0'), tensor([ 3, 15,  6,  3], device='cuda:0'), tensor([ 5,  5,  6, 14], device='cuda:0'), tensor([13, 15,  6,  3], device='cuda:0')]
[tensor([ 3, 10,  3,  3], device='cuda:0'), tensor([ 3, 10, 11,  3], device='cuda:0'), tensor([ 3,  3, 10, 11], device='cuda:0'), tensor([ 3,  3, 11,  0], device='cuda:0'), tensor([3, 3, 1, 0], device='cuda:0'), tensor([ 8, 10, 10,  6], device='cuda:0'), tensor([ 3, 15,  6,  3], device='cuda:0'), tensor([ 3,  3,  8, 10], device='cuda:0')]
[tensor([13, 13, 13, 13], device='cuda:0'), tensor([ 5, 15,  3,  3], device='cuda:0'), tensor([13,  5,  0, 14], device='cuda:0'), tensor([ 8,  5, 15,  8], device='cuda:0'), tensor([ 5, 13, 13,  5], device='cuda:0'), tensor([ 8, 10, 10,  6], device='cuda:0'), tensor([ 5, 13,  4,  8], device='cuda:0'), tensor([ 5, 13,  0,  6], device='cuda:0')]
[2025-10-31 22:35:19,253] torch.distributed.elastic.agent.server.api: [WARNING] Received Signals.SIGINT death signal, shutting down workers
[2025-10-31 22:35:19,254] torch.distributed.elastic.multiprocessing.api: [WARNING] Sending process 839448 closing signal SIGINT
[2025-10-31 22:35:19,407] torch.distributed.elastic.multiprocessing.api: [WARNING] Sending process 839448 closing signal SIGTERM
Traceback (most recent call last):
  File "/home/linyihan/miniconda3/envs/vla-adapter/lib/python3.10/site-packages/torch/distributed/elastic/agent/server/api.py", line 727, in run
    result = self._invoke_run(role)
  File "/home/linyihan/miniconda3/envs/vla-adapter/lib/python3.10/site-packages/torch/distributed/elastic/agent/server/api.py", line 868, in _invoke_run
    time.sleep(monitor_interval)
  File "/home/linyihan/miniconda3/envs/vla-adapter/lib/python3.10/site-packages/torch/distributed/elastic/multiprocessing/api.py", line 62, in _terminate_process_handler
    raise SignalException(f"Process {os.getpid()} got signal: {sigval}", sigval=sigval)
torch.distributed.elastic.multiprocessing.api.SignalException: Process 839424 got signal: 2

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/linyihan/miniconda3/envs/vla-adapter/lib/python3.10/site-packages/torch/distributed/elastic/agent/server/api.py", line 734, in run
    self._shutdown(e.sigval)
  File "/home/linyihan/miniconda3/envs/vla-adapter/lib/python3.10/site-packages/torch/distributed/elastic/agent/server/local_elastic_agent.py", line 311, in _shutdown
    self._pcontext.close(death_sig)
  File "/home/linyihan/miniconda3/envs/vla-adapter/lib/python3.10/site-packages/torch/distributed/elastic/multiprocessing/api.py", line 318, in close
    self._close(death_sig=death_sig, timeout=timeout)
  File "/home/linyihan/miniconda3/envs/vla-adapter/lib/python3.10/site-packages/torch/distributed/elastic/multiprocessing/api.py", line 706, in _close
    handler.proc.wait(time_to_wait)
  File "/home/linyihan/miniconda3/envs/vla-adapter/lib/python3.10/subprocess.py", line 1209, in wait
    return self._wait(timeout=timeout)
  File "/home/linyihan/miniconda3/envs/vla-adapter/lib/python3.10/subprocess.py", line 1953, in _wait
    time.sleep(delay)
  File "/home/linyihan/miniconda3/envs/vla-adapter/lib/python3.10/site-packages/torch/distributed/elastic/multiprocessing/api.py", line 62, in _terminate_process_handler
    raise SignalException(f"Process {os.getpid()} got signal: {sigval}", sigval=sigval)
torch.distributed.elastic.multiprocessing.api.SignalException: Process 839424 got signal: 2

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/linyihan/miniconda3/envs/vla-adapter/bin/torchrun", line 7, in <module>
    sys.exit(main())
  File "/home/linyihan/miniconda3/envs/vla-adapter/lib/python3.10/site-packages/torch/distributed/elastic/multiprocessing/errors/__init__.py", line 347, in wrapper
    return f(*args, **kwargs)
  File "/home/linyihan/miniconda3/envs/vla-adapter/lib/python3.10/site-packages/torch/distributed/run.py", line 812, in main
    run(args)
  File "/home/linyihan/miniconda3/envs/vla-adapter/lib/python3.10/site-packages/torch/distributed/run.py", line 803, in run
    elastic_launch(
  File "/home/linyihan/miniconda3/envs/vla-adapter/lib/python3.10/site-packages/torch/distributed/launcher/api.py", line 135, in __call__
    return launch_agent(self._config, self._entrypoint, list(args))
  File "/home/linyihan/miniconda3/envs/vla-adapter/lib/python3.10/site-packages/torch/distributed/launcher/api.py", line 259, in launch_agent
    result = agent.run()
  File "/home/linyihan/miniconda3/envs/vla-adapter/lib/python3.10/site-packages/torch/distributed/elastic/metrics/api.py", line 123, in wrapper
    result = f(*args, **kwargs)
  File "/home/linyihan/miniconda3/envs/vla-adapter/lib/python3.10/site-packages/torch/distributed/elastic/agent/server/api.py", line 739, in run
    self._shutdown()
  File "/home/linyihan/miniconda3/envs/vla-adapter/lib/python3.10/site-packages/torch/distributed/elastic/agent/server/local_elastic_agent.py", line 311, in _shutdown
    self._pcontext.close(death_sig)
  File "/home/linyihan/miniconda3/envs/vla-adapter/lib/python3.10/site-packages/torch/distributed/elastic/multiprocessing/api.py", line 318, in close
    self._close(death_sig=death_sig, timeout=timeout)
  File "/home/linyihan/miniconda3/envs/vla-adapter/lib/python3.10/site-packages/torch/distributed/elastic/multiprocessing/api.py", line 706, in _close
    handler.proc.wait(time_to_wait)
  File "/home/linyihan/miniconda3/envs/vla-adapter/lib/python3.10/subprocess.py", line 1209, in wait
    return self._wait(timeout=timeout)
  File "/home/linyihan/miniconda3/envs/vla-adapter/lib/python3.10/subprocess.py", line 1953, in _wait
    time.sleep(delay)
  File "/home/linyihan/miniconda3/envs/vla-adapter/lib/python3.10/site-packages/torch/distributed/elastic/multiprocessing/api.py", line 62, in _terminate_process_handler
    raise SignalException(f"Process {os.getpid()} got signal: {sigval}", sigval=sigval)
torch.distributed.elastic.multiprocessing.api.SignalException: Process 839424 got signal: 2
